#! /bin/bash -e

print_help()
{
    cat >&2 <<MSG
$(basename "$0"): Kernel tool for dnos

This tools installs and runs kernel development packages for a specific distro
version inside a docker container. This allows using tools requiring exact
binary compatibility.

The installed packages include compilers, kernel images, debug symbols,
kpatch-build and systemtap.

Options:
--------

-h, --help                      Show this message
-n, --dry-run                   Just print what would be done
-r, --ssh-remote HOST           SSH destination (dnos port 2222)
-s, --sourcedir SRC             Kernel source dir (only for kpatch)
--use-linux-source-package      Set --sourcedir to unpacked source in /usr/src/
--extra-args-docker ARGS        Extra arguments for docker run
--extra-args-stap ARGS          Extra arguments for stap
--extra-args-staprun ARGS       Extra arguments for staprun
--extra-args-stapmod ARGS       Extra arguments for stap module
--use-ubuntu-stap               Use ubuntu /usr/bin/stap inside docker
--use-upstream-stap             Use upstream /usr/local/bin/stap inside docker.
    This requires updated staprun on remote target
-u, --match-uidgid              Match current uid/gid
--auto-prepare-source           Automatically prepare source for kpatch-build (default)
--no-auto-prepare-source        Opposite of --auto-prepare-source
--kpatch-srcdir KPATCH_SRCDIR   Set KPATCH_SRCDIR
--focal                         Use ubuntu focal 20.04 (default)
--bionic                        Use ubuntu focal 18.04

Environment Variables:
----------------------
KPATCH_SRCDIR
    Source directory to mount into container at /usr/src/kpatch. This should be
    a git checkout of kpatch that has been compiled.

Subcommands:
------------

run
    Run shell command inside the container (default is interactive shell)
stap
    Run stap in container with correct -r argument
remote-staprun
    Build stap.ko inside container and run on --ssh-remote
kpatch-build
    Run kpatch-build inside the container
kernel-build
    Run standard kernel build inside the container.
    This is similar to \`\`make -C $SRC\`\` but should match distro binaries.
prepare-source
    Prepare kernel given via --sourcedir

Default is to run an interactive shell inside the container.

Subcommands will automatically receive "correct" arguments to reference the
target kernel so \`\`stap\`\` is equivalent to \`\`run stap -r \$kver\`\`.

The current working directory is mounted inside the docker container (at
/mnt/cwd) so path references under ./ usually work but not externally.

Building kpatch modules:
------------------------
If using kernel source from git it needs to patch precisely, example for focal:

* Remote is git://kernel.ubuntu.com/ubuntu/ubuntu-focal.git
* Tag is Ubuntu-5.4.0-73.82

Some stuff are not inside ubuntu's linux git, they can be copied from
linux-source inside the container.

Example::

    dnos-kdev -s . kpatch-build -t vmlinux some.diff

The kernel source should be unpatched, all changes should be in the diff file.
MSG
}

parse_args()
{
    # Defaults
    opt_do_build="1"
    opt_extra_args=()
    opt_extra_args_docker=()
    opt_extra_args_stap=()
    opt_extra_args_staprun=()
    opt_extra_args_stapmod=()
    opt_sourcedir=
    opt_stap_exe=/usr/bin/stap

    opt_os_release=focal
    opt_auto_prepare_source=1

    # Scan args
    local LONG_OPTS=\
"help,\
do-build,no-build,\
ssh-remote:,\
sourcedir:,\
use-linux-source-package,\
extra-args-docker:,\
extra-args-stap:,\
extra-args-staprun:,\
extra-args-stapmod:,\
use-ubuntu-stap,\
use-upstream-stap,\
match-uidgid,\
auto-prepare-source,\
no-auto-prepare-source,\
kpatch-srcdir:,\
focal,bionic,\
dry-run"

    if [[ $OSTYPE = darwin* ]]; then
        if [[ -x /usr/local/opt/gnu-getopt/bin/getopt ]]; then
            getopt() { /usr/local/opt/gnu-getopt/bin/getopt "$@"; }
        else
            echo >&2 "Need gnu getopt"
            exit 2
        fi
    fi

    local opts
    opts=$(getopt -n "$0" -l "$LONG_OPTS" -o +nhr:s:u -- "$@")
    eval set -- "$opts"
    while [ $# -gt 0 ]; do
        case "$1" in
        -h|--help) print_help; exit 1 ;;
        -n|--dry-run) opt_dry_run=1 ;;
        --do-build) opt_do_build=1 ;;
        --no-build) opt_do_build=0 ;;
        -r|--ssh-remote) shift; opt_ssh_remote=$1 ;;
        -s|--sourcedir) shift; opt_sourcedir=$1 ;;
        --kpatch-srcdir) shift; KPATCH_SRCDIR=$1 ;;
        --use-linux-source-package) opt_sourcedir=/usr/src/linux-source-4.15.0 ;;
        --extra-args-docker) shift; opt_extra_args_docker+=($1) ;;
        --extra-args-stap) shift; opt_extra_args_stap+=($1) ;;
        --extra-args-staprun) shift; opt_extra_args_staprun+=($1) ;;
        --extra-args-stapmod) shift; opt_extra_args_stapmod+=($1) ;;
        --use-ubuntu-stap) opt_stap_exe=/usr/bin/stap ;;
        --use-upstream-stap) opt_stap_exe=/usr/local/bin/stap ;;
        --focal) opt_os_release=focal ;;
        --bionic) opt_os_release=bionic ;;
        -u|--match-uidgid) opt_match_uidgid=1 ;;
        --auto-prepare-source) opt_auto_prepare_source=1 ;;
        --no-auto-prepare-source) opt_auto_prepare_source=0 ;;
        --)
            if [[ $# == 1 ]]; then
                opt_subcmd="run"
                opt_extra_args=(bash)
            else
                shift
                opt_subcmd="$1"
                shift
                opt_extra_args=("$@")
                break
            fi
            ;;
        *)
            echo >&2 "unrecognized argument $1"
            exit 2
            ;;
        esac
        shift
    done

    if [[ -z $kver ]]; then
        if [[ $opt_os_release == focal ]]; then
            kver=5.4.0-73-generic
        elif [[ $opt_os_release == bionic ]]; then
            kver=4.15.0-23-generic
        else
            echo >&2 "Unknown OS release $opt_os_release"
        fi
    fi
}

dry_wrap()
{
    if [[ ${opt_dry_run:-0} == 1 ]]; then
        printf >&2 "DRY:%s\n" "$(printf " %q" "$@")"
        return 0
    else
        printf >&2 "RUN:%s\n" "$(printf " %q" "$@")"
        "$@"
        return $?
    fi
}

dry_wrap_exec()
{
    if [[ ${opt_dry_run:-0} == 1 ]]; then
        printf >&2 "DRY EXEC:%s\n" "$(printf " %q" "$@")"
        exit 0
    else
        printf >&2 "EXEC:%s\n" "$(printf " %q" "$@")"
        exec "$@"
    fi
}

script_dir()
(
    cd "$(dirname "${BASH_SOURCE[0]}")"
    local link
    while link=$(readlink "$(basename "${BASH_SOURCE[0]}")"); do
        cd "$(dirname "$link")"
    done
    pwd -P
)

docker_build()
{
    (
        dry_wrap cd "$(script_dir)/ubuntu-${opt_os_release}-docker"
        dry_wrap docker build . -t "$DOCKER_IMAGE"
    )
}

docker_run()
{
    dry_wrap docker run "${DOCKER_ARGS[@]}" "${opt_extra_args_docker[@]}" "$DOCKER_IMAGE" "$@"
}

prepare_source()
{
    echo >&2 "assume $(printf %q "$opt_sourcedir") is kernel source accessible from docker"
    # HACKS:
    if [[ $kver = 4.15.0-23-generic ]]; then
        docker_run cp /usr/src/linux-headers-$kver/scripts/ubuntu-retpoline-extract-one "$opt_sourcedir/scripts/"
    fi
    if [[ $kver = 5.4.0-73-generic ]]; then
        docker_run cp /usr/src/linux-source-5.4.0/debian/canonical-certs.pem "$opt_sourcedir/debian/"
    fi
    docker_run cp /boot/config-$kver "$opt_sourcedir/.config"
}

auto_prepare_source()
{
    if [[ $opt_auto_prepare_source == 1 && -n $opt_sourcedir ]]; then
        prepare_source
    fi
}

export_makeflags()
{
    # debian scripts pass an explicit KERNELVERSION= argument to make to
    # override the kernel version. Do the same through MAKEFLAGS in order
    # to match modmagic.
    export MAKEFLAGS="KERNELVERSION=$kver $MAKEFLAGS"
    # debian scripts pass CONFIG_DEBUG_SECTION_MISMATCH=y
    export MAKEFLAGS="CONFIG_DEBUG_SECTION_MISMATCH=y $MAKEFLAGS"
}

main()
{
    parse_args "$@"
    export DOCKER_IMAGE="dnos-kdev-${opt_os_release}:latest"
    if [[ $opt_do_build == 1 ]]; then
        docker_build
    fi

    # mount currently working directory
    DOCKER_ARGS+=(-v "$PWD:/mnt/cwd")
    DOCKER_ARGS+=(--workdir /mnt/cwd)

    if [[ $opt_match_uidgid == 1 ]]; then
        DOCKER_ARGS+=(--user "$(id -u):$(id -g)")
    fi

    case "$opt_subcmd" in
    run)
        DOCKER_ARGS+=(-i -t)
        docker_run "${opt_extra_args[@]}"
        ;;
    prepare-source)
        if [[ -z $opt_sourcedir ]]; then
            echo "Need --sourcedir"
            exit 1
        fi
        prepare_source
        ;;
    kpatch-build)
        DOCKER_ARGS+=(-v ~/.kpatch:/root/.kpatch)
        export_makeflags
        DOCKER_ARGS+=(-e MAKEFLAGS)
        auto_prepare_source
        if [[ -n $KPATCH_SRCDIR ]]; then
            DOCKER_ARGS+=(-v "$KPATCH_SRCDIR:/usr/src/kpatch")
            KPATCH_BUILD_EXE=/usr/src/kpatch/kpatch-build/kpatch-build
        fi
        # build args
        args=(
            --vmlinux /usr/lib/debug/boot/vmlinux-"$kver"
            --config /boot/config-"$kver"
        )
        if [[ -n $opt_sourcedir ]]; then
            args+=(--sourcedir "$opt_sourcedir")
        fi
        KPATCH_BUILD_EXE=${KPATCH_BUILD_EXE:-kpatch-build}
        docker_run "$KPATCH_BUILD_EXE" "${args[@]}" "${opt_extra_args[@]}"
        ;;
    kernel-build)
        export_makeflags
        DOCKER_ARGS+=(-e MAKEFLAGS)
        auto_prepare_source
        args=()
        if [[ -n $opt_sourcedir ]]; then
            args+=(-C "$opt_sourcedir")
        fi
        docker_run make "${args[@]}" "${opt_extra_args[@]}"
        ;;
    stap)
        DOCKER_ARGS+=(-v /root/.systemtap:/root/.systemtap)
        docker_run stap -r"$kver" "${opt_extra_args_stap[@]}" "${opt_extra_args[@]}"
        ;;
    remote-staprun)
        DOCKER_ARGS+=(-v /root/.systemtap:/root/.systemtap)
        stap_modname="stap"
        stap_modfile="$stap_modname.ko"
        docker_run "$opt_stap_exe" -r"$kver" -p4 -m "$stap_modname" "${opt_extra_args_stap[@]}" "${opt_extra_args[@]}"
        remote_tmpdir="/tmp/"
        dry_wrap scp "$stap_modfile" "$opt_ssh_remote:$remote_tmpdir"
        dry_wrap_exec ssh -t "$opt_ssh_remote" staprun \
                "${opt_extra_args_staprun[@]}" \
                "$remote_tmpdir/$stap_modfile" \
                "${opt_extra_args_stapmod[@]}"
        ;;
    restore-kernel)
        if [[ -z $opt_ssh_remote ]]; then
            echo >&2 "need --ssh-remote"
            exit 1
        fi
        dry_wrap_exec ssh -t "$opt_ssh_remote" apt-get install --reinstall \
                "linux-{image,modules,modules-extra,tools,cloud-tools}-$kver"
        ;;
    *)
        echo >&2 "unknown subcmd $opt_subcmd"
        exit 2
        ;;
    esac
}

main "$@"
